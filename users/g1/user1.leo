<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20160525154818.1"><vh>wcm 筆記</vh>
<v t="amd.20160525154830.1"><vh>Flask 使用 oauth2 與 GMail 帳號登入</vh>
<v t="amd.20160525154830.2"><vh>設置流程</vh></v>
</v>
<v t="amd.20160525162713.1"><vh>密碼儲存</vh></v>
<v t="leo.20160526094148.1"><vh>Youtube 與 Vimeo 學生簡報影片上傳規劃</vh></v>
</v>
<v t="amd.20160525111125.1" a="E"><vh>wsgi 程式開發</vh>
<v t="amd.20160525104848.1"><vh>users/g1 目錄下的程式</vh></v>
<v t="amd.20160525105255.1" a="E"><vh>@clean user1.py</vh>
<v t="amd.20160525110421.1"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="amd.20160525110421.3"><vh>helloworld</vh></v>
<v t="leo.20160526093050.1"><vh>threegear</vh></v>
<v t="amd.20160526212354.1"><vh>listfiles</vh></v>
<v t="amd.20160526224212.1"><vh>getfiles</vh></v>
<v t="leo.20160604101714.1"><vh>showstl</vh></v>
</v>
<v t="amd.20160525155305.1" a="E"><vh>進入 users/g1/templates</vh>
<v t="amd.20160525155325.1" a="E"><vh>@path templates</vh>
<v t="amd.20160525160129.1" a="E"><vh>@path g1</vh>
<v t="amd.20160525155334.1"><vh>@edit base.html</vh></v>
<v t="amd.20160525155345.1"><vh>@edit index.html</vh></v>
</v>
</v>
</v>
<v t="amd.20160525105009.1"><vh>跳出 g1 目錄</vh></v>
<v t="amd.20160525105027.1" a="E"><vh>@path ./../</vh>
<v t="amd.20160525104029.1"><vh>跳出 users 目錄</vh></v>
<v t="amd.20160525103938.2" a="E"><vh>@path ./../</vh>
<v t="amd.20160525104048.1" a="E"><vh>編輯 README.md</vh>
<v t="amd.20160525104115.1"><vh>@edit README.md</vh></v>
</v>
<v t="amd.20160525104513.1" a="E"><vh>編輯 setup.py</vh>
<v t="amd.20160525104513.2"><vh>@edit setup.py</vh></v>
</v>
<v t="amd.20160525104402.1" a="E"><vh>編輯 config.py</vh>
<v t="amd.20160525104402.2"><vh>@edit config.py</vh></v>
</v>
<v t="amd.20160525104350.1"><vh>編輯 init.py</vh>
<v t="amd.20160525104350.2"><vh>@edit init.py</vh></v>
</v>
<v t="amd.20160525104546.1" a="E"><vh>編輯 wsgi.py</vh>
<v t="amd.20160525104546.2"><vh>@edit wsgi.py</vh></v>
</v>
<v t="amd.20160525153914.1" a="E"><vh>編輯 nocache.py</vh>
<v t="amd.20160525153922.1"><vh>@edit nocache.py</vh></v>
</v>
<v t="amd.20160525104134.1" a="E"><vh>編輯 flaskapp.py</vh>
<v t="amd.20160525104134.2" a="E"><vh>@clean flaskapp.py</vh>
<v t="amd.20160525104320.1"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="amd.20160525105640.1"><vh>&lt;&lt;registers&gt;&gt;</vh></v>
<v t="amd.20160525104320.2"><vh>index</vh></v>
<v t="amd.20160525104320.3"><vh>user</vh></v>
<v t="amd.20160525104320.4"><vh>red</vh></v>
<v t="amd.20160525104320.5"><vh>guessform</vh></v>
<v t="amd.20160525104320.6"><vh>docheck</vh></v>
<v t="amd.20160525104320.7"><vh>option</vh></v>
<v t="amd.20160525104320.8"><vh>optionaction</vh></v>
<v t="amd.20160525104320.9"><vh>fileaxupload</vh></v>
<v t="amd.20160525104320.10"><vh>fileuploadform</vh></v>
<v t="amd.20160525104320.11"><vh>imageaxupload</vh></v>
<v t="amd.20160525104320.12"><vh>imageuploadform</vh></v>
<v t="amd.20160525104320.13"><vh>download</vh></v>
<v t="amd.20160525104320.14"><vh>send_images</vh></v>
<v t="amd.20160525104320.15"><vh>send_static</vh></v>
<v t="amd.20160525104320.16"><vh>send_blog</vh></v>
<v t="amd.20160525104320.17"><vh>send_file</vh></v>
<v t="amd.20160525112702.1"><vh>login</vh></v>
<v t="amd.20160525152908.1"><vh>logout</vh></v>
<v t="amd.20160525113036.1"><vh>menu</vh></v>
<v t="amd.20160525152948.1"><vh>alogin</vh></v>
<v t="amd.20160525153010.1"><vh>alogin_check</vh></v>
</v>
</v>
<v t="amd.20160525112816.1" a="E"><vh>@path templates</vh>
<v t="amd.20160525161050.1"><vh>@edit index.html</vh></v>
<v t="amd.20160525115003.1"><vh>@edit base.html</vh></v>
<v t="amd.20160525112824.1"><vh>@edit login.html</vh></v>
<v t="amd.20160525153041.1"><vh>@edit menu.html</vh></v>
<v t="amd.20160525153059.1"><vh>@edit alogin.html</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20160525111235.1"><vh>網誌編寫</vh>
<v t="amd.20160525111311.1"><vh>跳出 users/g1 目錄</vh></v>
<v t="amd.20160525111235.2" a="E"><vh>@path ./../../</vh>
<v t="amd.20160525111235.3"><vh>進入 static 目錄</vh></v>
<v t="amd.20160525111235.4" a="E"><vh>@path static</vh>
<v t="amd.20160525111235.5" a="E"><vh>假如要送到 gh-pages 分支, 使用下列按鈕</vh>
<v t="amd.20160525111235.6"><vh>@button gh-pages pelican</vh></v>
</v>
<v t="amd.20160525111235.7" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="amd.20160525111235.8"><vh>@button local pelican</vh></v>
</v>
<v t="amd.20160525111438.1" a="E"><vh>編輯設定檔</vh>
<v t="amd.20160525111449.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20160525111542.1"><vh>@edit publishconf.py</vh></v>
<v t="amd.20160525111558.1"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="amd.20160525111235.9" a="E"><vh>@path content/g1</vh>
<v t="amd.20160525111235.10"><vh>@edit user1_20160525.md</vh></v>
<v t="leo.20160526092804.1"><vh>@edit user1_20160526.md</vh></v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20160525103938.2"></t>
<t tx="amd.20160525104029.1"></t>
<t tx="amd.20160525104048.1"></t>
<t tx="amd.20160525104134.1"></t>
<t tx="amd.20160525104134.2">@language python
@tabwidth -4
&lt;&lt;declarations&gt;&gt;
&lt;&lt;registers&gt;&gt;
@others
if __name__ == "__main__":
    app.run()






</t>
<t tx="amd.20160525104320.1"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, \
    render_template, session, make_response, url_for, flash
import random
import math
import os
# init.py 為自行建立的起始物件
import init
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic
# from config.py 導入 CONFIG
from config import CONFIG
# 利用 nocache.py 建立 @nocache decorator, 讓頁面不會留下 cache
from nocache import nocache

#g1
# 導入 g1 目錄下的 user1.py
import users.g1.user1

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
    CALLBACK_URL = "http://cdw2-ladisai.rhcloud.com/menu"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"
    CALLBACK_URL = "http://localhost:5000/menu"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)

# 設置隨後要在 blueprint 應用程式中引用的 global 變數
app.config['data_dir'] = data_dir
app.config['static_dir'] = static_dir
app.config['download_dir'] = download_dir

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="amd.20160525104320.10">@app.route('/fileuploadform')
def fileuploadform():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    return "&lt;h1&gt;file upload&lt;/h1&gt;&lt;a href='menu'&gt;menu&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'downloads/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="amd.20160525104320.11">@app.route('/imageaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def imageaxupload():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"images/"+filename, "wb")
    else:
        file = open(data_dir+"images/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "image file uploaded!"

    
    
</t>
<t tx="amd.20160525104320.12">@app.route('/imageuploadform')
def imageuploadform():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    return "&lt;h1&gt;file upload&lt;/h1&gt;&lt;a href='menu'&gt;menu&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'images/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="amd.20160525104320.13">@app.route('/downloads/&lt;path:filename&gt;', methods=['GET', 'POST'])
def download(filename):
    #return send_from_directory(download_dir, filename=filename, as_attachment=True)
    return send_from_directory(download_dir, filename=filename)
    


</t>
<t tx="amd.20160525104320.14"># setup static directory
@app.route('/images/&lt;path:path&gt;')
def send_images(path):
    return send_from_directory(data_dir+"/images/", path)
</t>
<t tx="amd.20160525104320.15"># setup static directory
@app.route('/static/')
def send_static():
  return app.send_static_file('index.html')

</t>
<t tx="amd.20160525104320.16"># setup static directory
@app.route('/static/blog/')
def send_blog():
  return app.send_static_file('blog/index.html')

</t>
<t tx="amd.20160525104320.17"># setup static directory
@app.route('/static/&lt;path:path&gt;')
def send_file(path):
  return app.send_static_file(static_dir+path)

</t>
<t tx="amd.20160525104320.2">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)
</t>
<t tx="amd.20160525104320.3">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)
</t>
<t tx="amd.20160525104320.4">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")
</t>
<t tx="amd.20160525104320.5">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)
</t>
<t tx="amd.20160525104320.6">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 
</t>
<t tx="amd.20160525104320.7">@app.route('/option', methods=["GET", "POST"])
def option():
    # 各組選出組長的方式, 若採遞增, 則各組內學號最小者為組長
    option_list1 = ["遞增", "遞減"]
    # 各組組長間的排序定組序, 若採遞增, 則學號最小的組長為第1組
    option_list2 = ["遞增", "遞減"]
    # 電腦教室共有 9 排電腦
    column = 9
    # 加上班級選擇
    option_list3 = ["2a", "2b"]
    # 根據班級的總人數, 以 9 去除, 算出需要排幾列才能夠容納的下, 而且若列數超過 7
    # 表示這些學員必須與其他同組學員共用電腦

    return render_template('option.html', option_list1=option_list1, option_list2=option_list2, option_list3=option_list3, column=column)
</t>
<t tx="amd.20160525104320.8">@app.route('/optionaction', methods=['POST'])
def optionaction():
    # 最後傳回的字串為 out_string
    out_string = ""
    # 程式內需要暫時使用的 tmp_string
    tmp_string = ""
    # 傳回字串中, 用來說明排序原則的 desc_string
    desc_string = ""
    result = []
    group_sorted = []
    num_of_stud = 0
    # 每組至多 7 人
    max_num_in_one_group = 7
    # 電腦教室配置, 共有 9 排
    total_column = 9
    # 上面為相關變數的初始值設定, 以下開始取出 data_a 或 data_b 進行處理, 由 option3 傳回值決定
    if request.form["option3"]  == "2a":
        content = request.form["data_a"]
    else:
        content = request.form["data_b"]
    #result = content.splitlines()
    for line in content.splitlines():
        result.append(list(line.split(",")))
    # i 為行序
    for i in range(len(result)):
        # j 為組員序
        for j in range(len(result[i])):
            tmp_string += result[i][j] + ", "
        out_string += "第" + str(i+1) + "排資料:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    for i in range(len(result)):
        # 開始進入組內排序, 根據 request.form["option1"]  的值決定遞增或遞減
        if request.form["option1"]  == "遞增":
            group_list = sorted(list(filter(None, result[i])))
        else:
            group_list = sorted(list(filter(None, result[i])), reverse=True)
        group_sorted.append(group_list)
    if request.form["option1"]  == "遞增":
        desc_string += "組內學號最小者為組長."
    else:
         desc_string += "組內學號最大者為組長."
    # 開始進入組間組長學號排序, 根據 request.form["option2"] 的值決定遞增或遞減
    if request.form["option2"]  == "遞增":
        desc_string += "各組長中學號最小者為第1組."
        final_result = sorted(group_sorted)
    else:
        desc_string += "各組長中學號最大者為第1組."
        final_result = sorted(group_sorted, reverse=True)
    out_string += "&lt;br /&gt;" + desc_string + "&lt;br /&gt;"
    # i 為行序
    for i in range(len(final_result)):
        # j 為組員序
        for j in range(len(final_result[i])):
            num_of_stud += 1
            tmp_string += final_result[i][j] + ","
        out_string += "第" + str(i+1) + "組:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    #return "總共有" + str(i+) + "組"
    # group_num 為總組數
    group_num = i + 1
    # 截至這裡, 已經完成選組長, 以及定組序的工作 ,接下來要排座位, 並且印出座位表
    # 先算每班的總人數
    #return "總共有"+ str(num_of_stud) + "人"
    seat_by_column = []
    for row in range(max_num_in_one_group):
    # 每組最多 7 人
    #for row in range(7):
        # 這裡的 11 為總組數
        #for column in range(11):
        for column in range(group_num):
            # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
            try:
                seat_by_column.append(final_result[column][row])
            except:
                seat_by_column.append("")
    # seat_by_column 為去除空白字串前的座位數列
    # 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序
    seat_by_column = list(filter(None, seat_by_column))
    # 然後每 N 個取為 1 排, 即可得到以排為主的座位序列, 而 N 則視全班人數除以 9, 也就是 total_column 進位決定, 因為共有 9 排
    N = math.ceil(num_of_stud/total_column)
    # for debug
    #return str(num_of_stud) + ":" + str(total_column) + ":" + str(N)
    column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
    # 列出每 N 個組員一排的數列 column_list
    # 接下來要納入以排為主的座位
    # 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
    seat_dict = {}
    for column in range(len(column_list)):
        for i in range(N):
            try:
                seat_dict.update({column_list[column][i]: (column, i)})
            except:
                seat_dict.update({"": ""})
                
    # 開始準備用順序列出學員座號
    # 根據學號, 排序 dictionary 的方法
    import operator
    seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)
    # 依照學號順序, 列出座位表
    out_string += "&lt;br /&gt;按照學號次序列出座位表:&lt;br /&gt;&lt;br /&gt;"
    for i in range(1, len(seat_dict_sort)):
        out_string +=  str(i) + ":"+ str(seat_dict_sort[i]) + "&lt;br /&gt;"
    # 結束準備用順序列出學員座號
    # dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
    #g.es(column_list[::-1])

    # 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列, 也就是 N 的值) 列數補上空白字串 (也就是空位)
    # 所以不能使用 zip, 而必須導入 zip_longest 模組方法
    from itertools import zip_longest
    final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
    # 列出最後的座位表
    #g.es(final_seat)
    # 最後轉成 html table 標註格式
    out_string += "&lt;br /&gt; &lt;br /&gt;"
    out_string += "&lt;table border='1' width='100%'&gt;"
    out_string += "&lt;tr&gt;&lt;td colspan='9' style='text-align:center'&gt;講台&lt;/td&gt;&lt;/tr&gt;"
    for row in range(len(final_seat)):
        out_string += "&lt;tr&gt;"
        # 因為每一 row 有 9, 也就是 total_column 個位子
        for i in range(total_column):
            try:
                if i%2 != 0:
                    out_string += "&lt;td style='text-align:center'  bgcolor='#FFD78C' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
                else:
                    out_string += "&lt;td style='text-align:center' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
            except:
                out_string += "&lt;td&gt;&amp;nbsp;&lt;/td&gt;"
        out_string += "&lt;/tr&gt;"
    out_string += "&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"
    return out_string
    # 等運算或資料處理結束後, 再將相關值送到對應的 template 進行資料的展示
    #return render_template('optionaction.html', option_list1=option_list1, option_list2=option_list2)
    

</t>
<t tx="amd.20160525104320.9">@app.route('/fileaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def fileaxupload():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"downloads/"+filename, "wb")
    else:
        file = open(data_dir+"downloads/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "files uploaded!"

    
    
</t>
<t tx="amd.20160525104350.1"></t>
<t tx="amd.20160525104402.1">@language python
import authomatic
from authomatic.providers import oauth2

# 希望設計流程來保全 consumer_key 與 consumer_secret 字串
CONFIG = {
        'google': {
            'class_': oauth2.Google,
            'consumer_key': '418441298841-hcbnnh847rq735sg92digsjlk3vf489a.apps.googleusercontent.com',
            'consumer_secret': 'wjj5f_N4UxLZ83L3m1XkMB60',
            #'scope': oauth2.Google.user_info_scope
            # 以下將只檢視(瞭解您在 Google 上的身分)與(檢視電子郵件地址)
            'scope': ['email']
        }
    }</t>
<t tx="amd.20160525104513.1"></t>
<t tx="amd.20160525104546.1"></t>
<t tx="amd.20160525104848.1"></t>
<t tx="amd.20160525105009.1"></t>
<t tx="amd.20160525105027.1"></t>
<t tx="amd.20160525105255.1">@language python
@tabwidth -4
&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="amd.20160525105640.1">app.register_blueprint(users.g1.user1.g1app)</t>
<t tx="amd.20160525110421.1">from flask import Blueprint, render_template, current_app, \
    send_from_directory, session, redirect, url_for
import os

# 這裡設定的 template_folder 為 template 搜尋目錄, 表示位於 user/g1/templates 目錄中
# 但是若 wcmw14/templates 目錄中有相同名稱的 template file, 則優先取外部的檔案
# 這樣的設計希望可以在統整各藍圖時, 可以隨時根據需要改寫 template 配置
g1app = Blueprint('g1', __name__, url_prefix='/g1', template_folder='templates')




</t>
<t tx="amd.20160525110421.3">@g1app.route('/')
def helloworld():
    user = "Yen"
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
    return render_template('g1index.html', user=user)</t>
<t tx="amd.20160525111125.1"></t>
<t tx="amd.20160525111235.1"></t>
<t tx="amd.20160525111235.2"></t>
<t tx="amd.20160525111235.3">@language md
# cdw11
協同產品設計實習 W11 倉儲-master 分支將與 http://cdw11ag1_402231530.rhcloud.com/ 雲端網站同步

登記為 cdw11 協同者: http://simpleflask-2014openshift.rhcloud.com/cdw11form

所有協同內容衝突請直接在 github 倉儲中解決, OpenShift 對應平台僅用來執行本倉儲的最新程式版本

各組員相關內容回報請利用 http:/ag1_402231531-ag100.rhcloud.com/static/blog/caag1_40223153y/ag100ag1_40223153 (ag100 代表 a 班 g100 組)

期中成績驗證:

htag1_40223153cdw11-ag100.rhcloud.com/images/cdw11_4a.png 

ag1_40223153//cdw11-ag100.rhcloud.com/images/cdw11_badc.png
ag1_40223153p://cdw11-ag100.rhcloud.com/images/cdw11_abcd.png




</t>
<t tx="amd.20160525111235.4"></t>
<t tx="amd.20160525111235.5"></t>
<t tx="amd.20160525111235.6">@language python
import os
#os.system("pelican content -o ./ -s publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican 執行完畢")

</t>
<t tx="amd.20160525111235.7"></t>
<t tx="amd.20160525111235.8">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="amd.20160525111235.9"></t>
<t tx="amd.20160525111311.1"></t>
<t tx="amd.20160525111438.1"></t>
<t tx="amd.20160525112702.1">@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
@app.route('/login', methods=['GET', 'POST'], defaults={'provider_name':'google'})
def login(provider_name):
    
    callbackurl = CALLBACK_URL
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
            
        # 利用 session 登記登入者的 email
        session['login_email'] = result.user.email
        
        # 這裡必須分近端與雲端, 因為 google logout redirect 的 url 不同
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            # 表示程式在雲端執行
            local = False
        else:
            # 表示在近端執行
            local = True
        # The rest happens inside the template.
        return render_template('login.html', result=result, local=local, callbackurl=callbackurl)
    
    # Don't forget to return the response.
    return response</t>
<t tx="amd.20160525112816.1"></t>
<t tx="amd.20160525113036.1">@language python
@app.route('/menu')
@app.route('/index')
@nocache
def menu():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 進入使用者已經登入的流程設計
    user = session.get('login_email')
    return render_template('menu.html', user=user)</t>
<t tx="amd.20160525152908.1">@app.route('/logout')
def logout():
    session.pop('login_email' , None)
    flash('已經登出!')
    #return redirect(url_for('menu'))
    return redirect(url_for('login'))</t>
<t tx="amd.20160525152948.1">@app.route('/alogin' , methods=['GET' , 'POST'])
def alogin():
    # 在 OpenShift 執行要啟動 SSL 跳轉
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
        openshift = True
    else:
        openshift = False
    
    return render_template('alogin.html', openshift=openshift)</t>
<t tx="amd.20160525153010.1">@app.route('/alogin_check' , methods=['GET' , 'POST'])
def alogin_check():
    spassword = "secret"
    username = request.form["username"]
    password = request.form["password"]
    if username != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if username == "admin":
            # 進入 admin 密碼查驗流程
            if password == spassword:
                # 利用 session 登記登入者的 email
                session['login_email'] = "admin"
                return redirect(url_for('menu'))
            else:
                return redirect(url_for('login'))
    return redirect(url_for('login'))</t>
<t tx="amd.20160525153914.1"></t>
<t tx="amd.20160525154818.1"></t>
<t tx="amd.20160525154830.1">基本規劃:

1. 使用 2016springwcm 帳號設置 Google+ API project

2. 在本地端採用從桌面讀取必要的 consumer_key 與 consumer_secret

3. 在 OpenShift 端則以 admin 用戶帳號上傳關鍵的設置檔案

4. 所以先要有檔案上傳的功能

5. 決定導入 authomatic 模組 (for oauth2)</t>
<t tx="amd.20160525154830.2">登入到 2016springwcm 郵件帳號中

登入後連結 https://console.developers.google.com

先點選 Google+ API 連結: https://console.developers.google.com/apis/api/plus/overview

進入 Google+ API 啟用程序, 要先建立 project, 選擇 2016wcmw13 作為專案名稱

必須選擇同意使用條款後, 才能完成專案的建立

Google+ API 專案建立完成後, 按下啟用連結鍵, 以完成啟用程序

按下前往憑證鈕, 準備到憑證處建立專案, 然後設定授權的 URI, 這個 URI 就是 oauth2 流程中的 CALLBACK_URL

這裡的憑證類型為 Google+ API

呼叫來源為網路瀏覽器 (Javascript)

需要存取使用者資料 (也就是從 Google+ 取得使用者的 email帳號)

接下來要建立 OAuth 2.0 用戶端 ID

用戶端 ID 輸入"wcmw13", 必須要提供"已授權的 JavaScript 來源"與"已授權的重新導向 URI"等兩項資料

其中的"已授權的 JavaScript 來源"就是這裡所建的本地端與 OpenShift 端網站的連結網址, 也就是 http://localhost:5000 與 OpenShift 應用程式對應網址

而"已授權的重新導向 URI"就是可以使用這項授權的 URI, 也就是 http://localhost:5000/login 與 OpenShift 對應的 URI 網址

產品名稱輸入"2016wcmw13" 後就可以取得對應的用戶端 ID 與 用戶端密碼

用戶端 ID

418441298841-hcbnnh847rq735sg92digsjlk3vf489a.apps.googleusercontent.com

用戶端密碼

wjj5f_N4UxLZ83L3m1XkMB60</t>
<t tx="amd.20160525155305.1"></t>
<t tx="amd.20160525155325.1"></t>
<t tx="amd.20160525160129.1"></t>
<t tx="amd.20160525162713.1">希望用 hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest() 轉換後寫入 hashed 內容</t>
<t tx="amd.20160526212354.1">@g1app.route('/listfiles')
def listfiles():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 利用導入 flask 的 current_app 取得在主應用程式中所設置的 config 變數
    download_dir = current_app.config.get('download_dir')
    files = os.listdir(download_dir)
    file_string = "&lt;a href='/index'&gt;Home&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
    if len(files) == 0:
        return file_string + "no file!"
    for filename in files:
        # 這裡要增加檔案副檔名的判斷, 若為 .stl, 則啟動 stl 檢視
        #/static/viewstl.html?src=/g1/get/spur_25.stl
        fileName, fileExtension = os.path.splitext(filename)
        if fileExtension == ".stl":
            file_string += "&lt;a href='/g1/get/"+filename+"'&gt;"+filename+"&lt;/a&gt; (&lt;a href='/static/viewstl.html?src=/g1/get/"+str(filename)+"'&gt;show "+str(filename)+"&lt;/a&gt;)&lt;br /&gt;"
        else:
            file_string += "&lt;a href='/g1/get/"+filename+"'&gt;"+filename+"&lt;/a&gt; &lt;br /&gt;"
    return file_string</t>
<t tx="amd.20160526224212.1">@g1app.route('/get/&lt;filename&gt;')
def get(filename):
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 利用導入 flask 的 current_app 取得在主應用程式中所設置的 config 變數
    download_dir = current_app.config.get('download_dir')
    return send_from_directory(download_dir, filename)</t>
<t tx="leo.20160526093050.1">@g1app.route('/threegear', defaults={'n1':15,'n2':20,'n3':18})
@g1app.route('/threegear/&lt;n1&gt;/&lt;n2&gt;/&lt;n3&gt;')
def threegear(n1, n2, n3):
    # 真正最後的架構應該要在函式中準備繪圖所需的資料, 然後用 template 呈現內容
    title = "網際 2D 繪圖"
    head = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;'''+ title +'''&lt;/title&gt;
    &lt;!-- IE 9: display inline SVG --&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=9"&gt;
'''
    script = '''
&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;
 
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
'''
    headstring = head + script + "&lt;/head&gt;"
    # 能否根據 n1, n2, n3 與 width, 算出合理的 height
    # 模數計算 m = canvas.width*0.8/(n1+n2+n3)
    # max([int(n1), int(n2), int(n3)])
    # 所以 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    body = '''
    
延伸應用:&lt;br /&gt;

軸孔加入 keyway &lt;br /&gt;
與 3D 零件設計繪圖對應 &lt;br/&gt;
與 2D/3D 軸的設計與繪圖對應&lt;br /&gt;&lt;br /&gt;
&lt;canvas id='gear1' width='800' height="'''+str(int(height))+'''"&gt;&lt;/canvas&gt;
 
&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math
 
# 主要用來取得畫布大小
canvas = doc["gear1"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)
 
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("gear1")
 
######################################
# 畫正齒輪輪廓
#####################################
def spur(cx, cy, m, n, pa, theta):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
 
    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree
    # theta 為角度
    gearTooth.rotate(theta) 
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
 
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True
 
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    # 接著繪製齒輪的基準線
    deg = math.pi/180
    Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], "PATH", {
          'strokeColor':'blue', 'lineWidth': 1})
    cgo.render(Line)
 
# 3個齒輪的齒數
n1 = '''+str(n1)+'''
n2 = '''+str(n2)+'''
n3 = '''+str(n3)+'''
 
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
# 利用 80% 的畫布寬度進行繪圖
# 計算模數的對應尺寸
m = canvas.width*0.8/(n1+n2+n3)
 
# 根據齒數與模組計算各齒輪的節圓半徑
pr1 = n1*m/2
pr2 = n2*m/2
pr3 = n3*m/2
 
# 畫布左右兩側都保留畫布寬度的 10%
# 依此計算對應的最左邊齒輪的軸心座標
cx = canvas.width*0.1+pr1
cy = canvas.height/2
 
# pa 為壓力角
pa = 25
 
# 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy)
spur(cx, cy, m, n1, pa, 0)
# 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊
# 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合
# 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n
spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2)
# 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置
# 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合
# 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度
# 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3
spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3)
&lt;/script&gt;
'''
    bodystring = "&lt;body&gt;" + body+"&lt;/body&gt;"
    endstring = "&lt;/html&gt;"
    outstring = headstring + bodystring + endstring
    return outstring
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
   # return render_template('g1index.html', user=user)</t>
<t tx="leo.20160526094148.1"></t>
<t tx="leo.20160604101714.1">@g1app.route('/showstl/&lt;filename&gt;')
def showstl(filename):
    outstring = '''

&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;STL VIEWER ON BROWSER&lt;/title&gt;
&lt;script type="text/javascript" src="jsc3d.js"&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;STL VIEWER&lt;/h1&gt;
&lt;/div&gt;
&lt;div style="width:800px; margin:auto; position:relative; font-size: 9pt; color: #777777;"&gt;
    &lt;canvas id="cv" style="border: 1px solid;" width="800" height="600" &gt;&lt;/canvas&gt;
    &lt;div id="tip" style="display:block; color:#000000; padding:5px; position:absolute; left:10px; top:550px; background-color:#c0c0c0; height:32px; width:250px; border-radius:5px; border:1px solid #000000; font-family:Arial,sans-serif; opacity:0.5;"&gt; 
        Drag mouse to rotate &lt;br&gt; Drag mouse with shift pressed to zoom
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;View Edit&lt;/h2&gt;
&lt;div style="width:800px;margin-left:50px;height:70px;border: 1px solid;"&gt;
    Model Color:&lt;input id="mdlClr" style="margin-right: 50px;" type="color" value="#00ff40" onchange="changeOption('ModelColor',this.value)"&gt;&lt;/input&gt;
    Back Color1:&lt;input id="bckClr1" style="margin-right: 50px;" type="color" onchange="changeOption('BackgroundColor1',this.value)"&gt;&lt;/input&gt;
    Back Color2:&lt;input id="bckClr2" type="color" onchange="changeOption('BackgroundColor2',this.value)"&gt;&lt;/input&gt;&lt;br /&gt;
    Render Mode:
    &lt;select id="render" style="margin-right: 50px;" onchange="changeOption('RenderMode',this.value)"&gt;
        &lt;option&gt;Flat&lt;/option&gt;
        &lt;option&gt;Point&lt;/option&gt;
        &lt;option&gt;Wireframe&lt;/option&gt;
        &lt;option&gt;Smooth&lt;/option&gt;
    &lt;/select&gt;
    Definition:
    &lt;select id="defini" onchange="changeOption('Definition',this.value)"&gt;
        &lt;option&gt;Standard&lt;/option&gt;
        &lt;option&gt;low&lt;/option&gt;
        &lt;option&gt;high&lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;
&lt;br /&gt;
This web application do not support the InternetExplorer.

&lt;script type="text/javascript"&gt;
    var viewer3d;
    function getOptions(){
        var mc = document.getElementById("mdlClr").value;
        var bc1 = document.getElementById("bckClr1").value;
        var bc2 = document.getElementById("bckClr2").value;
        var ren = document.getElementById("render").value;
        var def = document.getElementById("defini").value;
        return {ModelColor: mc,
                BackgroundColor1: bc1,
                BackgroundColor2: bc2,
                RenderMode: ren,
                Definition: def};
    }
    function readSTLfile(opt){
        var canvas = document.getElementById('cv');
        viewer3d = new JSC3D.Viewer(canvas);
        viewer3d.setParameter('SceneUrl', opt.SceneUrl);
        viewer3d.setParameter('InitRotationX', 0);
        viewer3d.setParameter('InitRotationY', 0);
        viewer3d.setParameter('InitRotationZ', 0);
        viewer3d.setParameter('ModelColor', opt.ModelColor);
        viewer3d.setParameter('BackgroundColor1', opt.BackgroundColor1);
        viewer3d.setParameter('BackgroundColor2', opt.BackgroundColor2);
        viewer3d.setParameter('RenderMode', opt.RenderMode);
        viewer3d.setParameter('Definition', opt.Definition);
        viewer3d.init();
        viewer3d.update();
    }
    function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
        viewer3d.setParameter(strOpt, strValue);
        viewer3d.init();
        viewer3d.update();
    }
    function openByUrl(){
        var url = document.getElementById("url").value;
        var opt = getOptions();
        opt.SceneUrl = document.getElementById("url").value;
        readSTLfile(opt);
    }
    function openByPass(){
        var pass = document.getElementById("url").value;
        var opt = getOptions();
        var fs = document.getElementById("pass").files;
        var f = fs[0];
        var reader = new FileReader();
        reader.onload = (function(theFile) {
            return function(e) {            
                opt.SceneUrl = e.target.result;
                console.log(opt.SceneUrl);
                readSTLfile(opt);
            };
        })(f);
        reader.readAsDataURL(f);
    }
    function openByGet(){
        var q = GetQueryString();
        console.log(q);
        var url = q.src;
        var opt = getOptions();
        opt.SceneUrl = url;
        readSTLfile(opt);
    }
    function GetQueryString(){
        if( 1 &lt; window.location.search.length )
        {
            var query = window.location.search.substring( 1 );
            var parameters = query.split( '&amp;' );
            var result = new Object();
            for( var i = 0; i &lt; parameters.length; i++ )
            {
                var element = parameters[ i ].split( '=' );
                var paramName = decodeURIComponent( element[ 0 ] );
                var paramValue = decodeURIComponent( element[ 1 ] );
                result[ paramName ] = decodeURIComponent( paramValue );
            }
            return result;
        }
        return null;
    }
    window.onload = function(){
        openByGet();
    }
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return outstring

</t>
</tnodes>
</leo_file>
